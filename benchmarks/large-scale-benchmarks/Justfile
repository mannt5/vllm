list:
    @just --list

hosts := "nb1-h100-60 nb1-h100-61 nb1-h100-62 nb1-h100-63"
num_nodes := "4"
leader_address := "10.96.0.64" # nb1-h100-60
# hosts := "nb1-h100-60 nb1-h100-15 nb1-h100-45 nb1-h100-61 nb1-h100-62 nb1-h100-63"
# num_nodes := "6"

# Helper function to run commands on all hosts with proper signal handling
_run-on-all-hosts cmd:
    #!/usr/bin/env bash
    # Array to store background process PIDs
    pids=()
    
    # Function to cleanup background processes
    cleanup() {
        echo "Received interrupt signal. Terminating all SSH processes..."
        for pid in "${pids[@]}"; do
            if kill -0 "$pid" 2>/dev/null; then
                kill -TERM "$pid" 2>/dev/null
            fi
        done
        # Wait a bit for graceful termination, then force kill if needed
        sleep 2
        for pid in "${pids[@]}"; do
            if kill -0 "$pid" 2>/dev/null; then
                kill -KILL "$pid" 2>/dev/null
            fi
        done
        exit 1
    }
    
    # Set up trap for SIGINT (Ctrl+C) and SIGTERM
    trap cleanup INT TERM
    
    for host in {{hosts}}; do
        ssh $host "bash --login -c '{{cmd}}'" &
        pids+=($!)  # Store the PID of the background process
    done
    
    # Wait for all background processes
    wait
    echo "All processes completed successfully."

# Helper function to run indexed commands on all hosts with proper signal handling
_run-indexed-on-all-hosts cmd:
    #!/usr/bin/env bash
    # Array to store background process PIDs
    pids=()
    
    # Function to cleanup background processes
    cleanup() {
        echo "Received interrupt signal. Terminating all SSH processes..."
        for pid in "${pids[@]}"; do
            if kill -0 "$pid" 2>/dev/null; then
                kill -TERM "$pid" 2>/dev/null
            fi
        done
        # Wait a bit for graceful termination, then force kill if needed
        sleep 2
        for pid in "${pids[@]}"; do
            if kill -0 "$pid" 2>/dev/null; then
                kill -KILL "$pid" 2>/dev/null
            fi
        done
        exit 1
    }
    
    # Set up trap for SIGINT (Ctrl+C) and SIGTERM
    trap cleanup INT TERM
    
    i=0
    for host in {{hosts}}; do
        # Replace INDEX_PLACEHOLDER with actual index and HOST_PLACEHOLDER with actual host
        cmd_with_index="{{cmd}}"
        cmd_with_index="${cmd_with_index//INDEX_PLACEHOLDER/$i}"
        cmd_with_index="${cmd_with_index//HOST_PLACEHOLDER/$host}"
        ssh $host "bash --login -c '$cmd_with_index'" &
        pids+=($!)  # Store the PID of the background process
        ((i++))
    done
    
    # Wait for all background processes
    wait
    echo "All processes completed successfully."

run-commands-on-all-nodes:
    #!/usr/bin/env bash
    for host in {{hosts}}; do
        # ssh $host "bash -l -c 'hostname'" &
        # ssh $host "bash -l -c 'nvcc --version'" &
        # ssh $host "bash -l -c 'curl --proto =https --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y'" &
        # ssh $host "bash -l -c 'cargo install just'" &
        ssh $host "bash -l -c 'HF_TRANSFER=1 /mnt/data/home/smo/vllm/.venv/bin/huggingface-cli download deepseek-ai/DeepSeek-R1'" &
    done
    wait 

env_sh := "~/vllm/benchmarks/large-scale-benchmarks/env.sh"
pwd := "~/vllm/benchmarks/large-scale-benchmarks"

_worker-run-gdr-copy-test:
    #!/usr/bin/env bash
    source {{env_sh}}
    $WORKSPACE/gdrcopy_install/bin/gdrcopy_copybw

run-gdr-copy-test:
    @just _run-on-all-hosts "cd {{pwd}} && just _worker-run-gdr-copy-test"

_worker-run-deepep-intranode-test host:
    #!/usr/bin/env bash
    source {{env_sh}}
    cd ~/vllm
    source .venv/bin/activate
    python $WORKSPACE/DeepEP/tests/test_intranode.py | tee {{pwd}}/logs/deepep-intranode-test-{{host}}.log

run-deepep-intranode-test:
    @just _run-indexed-on-all-hosts "cd {{pwd}} && just _worker-run-deepep-intranode-test HOST_PLACEHOLDER"

_worker-run-deepep-internode-test i host:
    #!/usr/bin/env bash
    # set -ex
    source {{env_sh}}
    cd ~/vllm
    source .venv/bin/activate

    export RANK={{i}}
    export WORLD_SIZE={{num_nodes}}
    export MASTER_ADDR={{leader_address}}

    # export NCCL_DEBUG=INFO
    python $WORKSPACE/DeepEP/tests/test_internode.py 2>&1 | tee {{pwd}}/logs/deepep-internode-test-{{host}}.log

run-deepep-internode-test:
    @just _run-indexed-on-all-hosts "cd {{pwd}} && just _worker-run-deepep-internode-test INDEX_PLACEHOLDER HOST_PLACEHOLDER"

_worker-run-r1 i:
    #!/usr/bin/env bash
    source {{env_sh}}
    cd ~/vllm
    source .venv/bin/activate

    export VLLM_ALL2ALL_BACKEND="deepep_high_throughput" 
    export VLLM_USE_DEEP_GEMM=1
    export DP_SIZE=$(({{num_nodes}} * 8))
    export DP_SIZE_LOCAL=8
    export START_RANK=$(({{i}} * 8))

    # Only the leader node (index 0) should specify data-parallel-address
    # Worker nodes connect to the leader but don't bind to its address
    if [ {{i}} -eq 0 ]; then
        LEADER_ARGS="--data-parallel-address {{leader_address}}"
    else
        LEADER_ARGS=""
    fi

    vllm serve deepseek-ai/DeepSeek-R1 --trust-remote-code \
         --no-enable-prefix-caching --disable-log-requests \
        --tensor-parallel-size 1 \
        --enable-expert-parallel \
        --data-parallel-size $DP_SIZE \
        --data-parallel-size-local $DP_SIZE_LOCAL \
        $LEADER_ARGS \
        --data-parallel-rpc-port 5555 \
        --data-parallel-start-rank $START_RANK

run-r1:
    @just _run-indexed-on-all-hosts "cd {{pwd}} && just _worker-run-r1 INDEX_PLACEHOLDER"
